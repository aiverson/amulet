to_string : {'a : type}. 'a -> string
writeln : string -> unit
show : type -> type
Show : {'a : type}. ('a -> string) -> show 'a
show_string : show string
show_int : show int
show : {'a : type}. show 'a => 'a -> string
print : {'a : type}. show 'a => 'a -> unit
functor : (type -> type) -> type
Functor : {'f : type -> type}. ({'a : type}. {'b : type}. ('a -> 'b) -> 'f 'a -> 'f 'b) -> functor 'f
fmap : {'f : type -> type}. {'a : type}. {'b : type}. functor 'f => ('a -> 'b) -> 'f 'a -> 'f 'b
foldable : (type -> type) -> type
Foldable : {'f : type -> type}. ({'r : type}. {'a : type}. ('a -> 'r -> 'r) -> 'r -> 'f 'a -> 'r) -> foldable 'f
foldr : {'f : type -> type}. {'r : type}. {'a : type}. foldable 'f => ('a -> 'r -> 'r) -> 'r -> 'f 'a -> 'r
nat : type
Z : nat
S : nat -> nat
vect : nat -> type -> type
Nil : {'n : nat}. {'a : type}. ('n ~ Z) ⊃ vect 'n 'a
Cons : {'n : nat}. {'a : type}. {'k : nat}. ('n ~ S 'k) ⊃ ('a * vect 'k 'a) -> vect 'n 'a
:: : {'a : type}. {'k : nat}. 'a -> vect 'k 'a -> vect (S 'k) 'a
show_nil : {'a : type}. show (vect Z 'a)
show_cons : {'n : nat}. {'a : type}. show 'a => show (vect 'n 'a) => show (vect (S 'n) 'a)
functor_nil : functor (vect Z)
functor_succ : {'k : nat}. functor (vect 'k) => functor (vect (S 'k))
foldable_nil : foldable (vect Z)
foldable_succ : {'k : nat}. foldable (vect 'k) => foldable (vect (S 'k))
main : unit
