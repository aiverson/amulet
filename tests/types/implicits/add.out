nat : type
Z : nat
S : nat -> nat
vect : nat -> type -> type
Nil : {'n : nat}. {'a : type}. ('n ~ Z) ⊃ vect 'n 'a
Cons : {'n : nat}. {'a : type}. {'k : nat}. ('n ~ S 'k) ⊃ ('a * vect 'k 'a) -> vect 'n 'a
:: : {'ev : type}. {'k : nat}. 'ev -> vect 'k 'ev -> vect (S 'k) 'ev
add : nat -> nat -> nat -> type
AZ : {'a : nat}. {'c : nat}. {'b : nat}. ('a ~ Z, 'c ~ 'b) ⊃ add 'a 'b 'c
AS : {'a : nat}. {'c : nat}. {'a : nat}. {'b : nat}. {'c : nat}. ('a ~ S 'a, 'c ~ S 'c) ⊃ add 'a 'b 'c -> add 'a 'b 'c
add_zero : {'b : nat}. add Z 'b 'b
add_succ : {'a : nat}. {'b : nat}. {'c : nat}. add 'a 'b 'c => add (S 'a) 'b (S 'c)
append : {'n : nat}. {'k : nat}. {'l : nat}. {'a : type}. add 'n 'k 'l => vect 'n 'a -> vect 'k 'a -> vect 'l 'a
main : vect (S (S (S (S (S Z))))) int
