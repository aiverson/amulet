tostring : {'a : type}. 'a -> string
writeln : string -> unit
identity : type -> type
Identity : {'a : type}. 'a -> identity 'a
runIdentity : {'a : type}. identity 'a -> 'a
const : {'a : type}. type -> 'a -> type
Const : {'a : type}. {'b : 'hn}. 'a -> const 'a 'b
getConst : {'a : type}. {'b : 'il}. const 'a 'b -> 'a
functor : (type -> type) -> type
Functor : {'f : type -> type}. ({'a : type}. {'b : type}. ('a -> 'b) -> 'f 'a -> 'f 'b) -> functor 'f
<$> : {'f : type -> type}. {'a : type}. {'b : type}. functor 'f => ('a -> 'b) -> 'f 'a -> 'f 'b
applicative : (type -> type) -> type
Applicative : {'f : type -> type}. {'ns : type}. ({'a : 'ns}. {'b : 'ns}. 'f ('a -> 'b) -> 'f 'a -> 'f 'b * {'a : type}. 'a -> 'f 'a) -> applicative 'f
<*> : {'f : type -> type}. {'a : type}. {'b : type}. applicative 'f => 'f ('a -> 'b) -> 'f 'a -> 'f 'b
pure : {'f : type -> type}. {'a : type}. applicative 'f => 'a -> 'f 'a
monoid : type -> type
Monoid : {'m : type}. ('m * 'm -> 'm -> 'm) -> monoid 'm
mappend : {'m : type}. monoid 'm => 'm -> 'm -> 'm
mempty : {'a : type}. monoid 'a => 'a
show : type -> type
Show : {'a : type}. ('a -> string) -> show 'a
show : {'a : type}. show 'a => 'a -> string
print : {'a : type}. show 'a => 'a -> unit
show_string : show string
show_int : show int
show_bool : show bool
show_pair : {'a : type}. {'b : type}. show 'a => show 'b => show ('a * 'b)
functor_identity : functor identity
functor_const : {'a : type}. functor (const 'a)
applicative_identity : applicative identity
applicative_const : {'a : type}. monoid 'a => applicative (const 'a)
functor_from_applicative : {'f : type -> type}. applicative 'f => functor 'f
& : {'a : type}. {'b : type}. {'c : type}. ('c -> 'b) -> ('a -> 'c) -> 'a -> 'b
|> : {'a : type}. {'b : type}. 'a -> ('a -> 'b) -> 'b
fst : {'a : type}. {'f : type -> type}. {'b : type}. {'c : type}. functor 'f => ('c -> 'f 'b) -> ('c * 'a) -> 'f ('b * 'a)
snd : {'a : type}. {'f : type -> type}. {'b : type}. {'c : type}. functor 'f => ('c -> 'f 'b) -> ('a * 'c) -> 'f ('a * 'b)
.~ : {'a : type}. {'b : type}. {'c : type}. {'d : type}. (('d -> identity 'a) -> 'b -> identity 'c) -> 'a -> 'b -> 'c
^. : {'a : type}. {'b : type}. {'c : 'awy}. {'d : type}. {'e : 'axa}. 'a -> (('d -> const 'd 'e) -> 'a -> const 'b 'c) -> 'b
list : type -> type
Nil : {'a : type}. list 'a
Cons : {'a : type}. ('a * list 'a) -> list 'a
:: : {'a : type}. 'a -> list 'a -> list 'a
show_list : {'a : type}. show 'a => show (list 'a)
functor_list : functor list
applicative_list : applicative list
monoid_list : {'a : type}. monoid (list 'a)
traverse : {'f : type -> type}. {'a : type}. {'b : type}. applicative 'f => ('b -> 'f 'a) -> list 'b -> 'f (list 'a)
foldMapOf : {'a : type}. {'b : type}. {'c : 'bxk}. {'d : type}. {'e : type}. {'f : 'bxn}. (('d -> const 'e 'f) -> 'a -> const 'b 'c) -> ('d -> 'e) -> 'a -> 'b
toListOf : {'a : type}. {'b : type}. {'c : 'cak}. {'f : 'cal}. {'d : type}. (('d -> const (list 'd) 'f) -> 'a -> const 'b 'c) -> 'a -> 'b
main : unit
