nat : type
Z : nat
S : nat -> nat
vect : nat -> type -> type
Nil : Spec{'n : 'bz}. Spec{'a : type}. ('n ~ Z) ⊃ vect 'n 'a
Cons : Spec{'n : 'dh}. Spec{'a : type}. Spec{'k : nat}. ('n ~ S 'k) ⊃ ('a * vect 'k 'a) -> vect 'n 'a
functor : (type -> type) -> constraint
map : Spec{'f : type -> type}. functor 'f => Spec{'a : type}. Spec{'b : type}. ('a -> 'b) -> 'f 'a -> 'f 'b
