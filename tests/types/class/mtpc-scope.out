functor : (type -> type) -> constraint
map : Spec{'f : type -> type}. functor 'f => Spec{'a : type}. Spec{'b : type}. ('a -> 'b) -> 'f 'a -> 'f 'b
foldable : (type -> type) -> constraint
iapplicative : Infer{'jv : type}. ('jv -> 'jv -> type -> type) -> constraint
<*> : Spec{'f : 'jv -> 'jv -> type -> type}. iapplicative 'f => Infer{'jv : type}. Spec{'a : type}. Spec{'b : type}. Spec{'i : 'jv}. Spec{'j : 'jv}. Spec{'k : 'jv}. 'f 'i 'j ('a -> 'b) -> 'f 'j 'k 'a -> 'f 'i 'k 'b
pure : Spec{'f : 'jv -> 'jv -> type -> type}. iapplicative 'f => Infer{'jv : type}. Spec{'a : type}. Spec{'i : 'jv}. 'a -> 'f 'i 'i 'a
imonad : Infer{'xv : type}. ('xv -> 'xv -> type -> type) -> constraint
>>= : Spec{'m : 'xv -> 'xv -> type -> type}. imonad 'm => Infer{'xv : type}. Spec{'a : type}. Spec{'b : type}. Spec{'i : 'xv}. Spec{'j : 'xv}. Spec{'k : 'xv}. ('a -> 'm 'j 'k 'b) -> 'm 'i 'j 'a -> 'm 'i 'k 'b
iio : Infer{'a : type}. Infer{'b : type}. 'b -> 'a -> type -> type
IIO : Infer{'a : type}. Infer{'b : type}. Spec{'before : 'b}. Spec{'after : 'a}. Spec{'a : type}. (unit -> 'a) -> iio 'before 'after 'a
