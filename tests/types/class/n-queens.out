nil : Spec{'a : type}. 'a
nil : type
cons : Infer{'a : type}. Infer{'b : type}. 'b -> 'a -> type
first : Infer{'jm : type}. Infer{'jn : type}. 'jn -> 'jm -> constraint
list_cat : Infer{'pg : type}. Infer{'ph : type}. Infer{'pi : type}. 'pi -> 'ph -> 'pg -> constraint
cat_all : Infer{'yt : type}. Infer{'yu : type}. 'yu -> 'yt -> constraint
t : type
f : type
not : Infer{'ahp : type}. Infer{'ahq : type}. 'ahq -> 'ahp -> constraint
or : Infer{'amh : type}. Infer{'ami : type}. Infer{'amj : type}. 'amj -> 'ami -> 'amh -> constraint
any_t : Infer{'awa : type}. Infer{'awb : type}. 'awb -> 'awa -> constraint
nat : type
Z : nat
S : nat -> nat
peq : Infer{'bgb : type}. Infer{'bgc : type}. Infer{'bgd : type}. 'bgd -> 'bgc -> 'bgb -> constraint
plt : Infer{'bsy : type}. Infer{'bsz : type}. Infer{'bta : type}. 'bta -> 'bsz -> 'bsy -> constraint
absdiff : Infer{'cfv : type}. Infer{'cfw : type}. Infer{'cfx : type}. 'cfx -> 'cfw -> 'cfv -> constraint
range : Infer{'cti : type}. Infer{'ctj : type}. 'ctj -> 'cti -> constraint
apply : Infer{'daj : type}. Infer{'dak : type}. Infer{'dal : type}. 'dal -> 'dak -> 'daj -> constraint
conj1 : Infer{'dcc : type}. 'dcc -> constraint
map : Infer{'dgq : type}. Infer{'dgr : type}. Infer{'dgs : type}. 'dgs -> 'dgr -> 'dgq -> constraint
mapcat : Infer{'dro : type}. Infer{'drp : type}. Infer{'drq : type}. 'drq -> 'drp -> 'dro -> constraint
appendif : Infer{'ecb : type}. Infer{'ecc : type}. Infer{'ecd : type}. Infer{'ece : type}. 'ece -> 'ecd -> 'ecc -> 'ecb -> constraint
filter : Infer{'ekj : type}. Infer{'ekk : type}. Infer{'ekl : type}. 'ekl -> 'ekk -> 'ekj -> constraint
queen : Infer{'a : type}. Infer{'b : type}. 'b -> 'a -> type
queen1 : Infer{'a : type}. 'a -> type
queens_in : Infer{'fba : type}. Infer{'fbb : type}. Infer{'fbc : type}. 'fbc -> 'fbb -> 'fba -> constraint
threatens : Infer{'fic : type}. Infer{'fid : type}. Infer{'fie : type}. 'fie -> 'fid -> 'fic -> constraint
threatens1 : Infer{'a : type}. 'a -> type
safe : Infer{'gde : type}. Infer{'gdf : type}. Infer{'gdg : type}. 'gdg -> 'gdf -> 'gde -> constraint
safe1 : Infer{'a : type}. 'a -> type
addqueen : Infer{'gqb : type}. Infer{'gqc : type}. Infer{'gqd : type}. Infer{'gqe : type}. 'gqe -> 'gqd -> 'gqc -> 'gqb -> constraint
addqueen2 : Infer{'a : type}. Infer{'b : type}. 'b -> 'a -> type
addq_all : Infer{'hgb : type}. Infer{'hgc : type}. Infer{'hgd : type}. Infer{'hge : type}. 'hge -> 'hgd -> 'hgc -> 'hgb -> constraint
addqueens : Infer{'hid : type}. Infer{'hie : type}. Infer{'hif : type}. Infer{'hig : type}. 'hig -> 'hif -> 'hie -> 'hid -> constraint
addq_if : Infer{'hkf : type}. Infer{'hkg : type}. Infer{'hkh : type}. Infer{'hki : type}. Infer{'hkj : type}. 'hkj -> 'hki -> 'hkh -> 'hkg -> 'hkf -> constraint
snat : nat -> type
SZ : Infer{'iko : type}. Spec{'n : 'iko}. ('n ~ Z) ⊃ snat 'n
SS : Infer{'ilp : type}. Spec{'n : 'ilp}. Spec{'n : nat}. ('n ~ S 'n) ⊃ snat 'n -> snat 'n
solution : nat -> type -> constraint
solution : Spec{'n : nat}. Spec{'c : type}. solution 'n 'c => snat 'n -> 'c
x : cons (queen (S (S (S Z))) (S Z)) (cons (queen (S (S Z)) (S (S (S Z)))) (cons (queen (S Z) Z) (cons (queen Z (S (S Z))) nil)))
