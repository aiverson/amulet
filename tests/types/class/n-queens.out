nil : Spec{'a : type}. 'a
nil : type
cons : Infer{'a : type}. Infer{'b : type}. 'b -> 'a -> type
first : Infer{'jc : type}. Infer{'jd : type}. 'jd -> 'jc -> constraint
list_cat : Infer{'ny : type}. Infer{'nz : type}. Infer{'oa : type}. 'oa -> 'nz -> 'ny -> constraint
cat_all : Infer{'wl : type}. Infer{'wm : type}. 'wm -> 'wl -> constraint
t : type
f : type
not : Infer{'adz : type}. Infer{'aea : type}. 'aea -> 'adz -> constraint
or : Infer{'aht : type}. Infer{'ahu : type}. Infer{'ahv : type}. 'ahv -> 'ahu -> 'aht -> constraint
any_t : Infer{'apy : type}. Infer{'apz : type}. 'apz -> 'apy -> constraint
nat : type
Z : nat
S : nat -> nat
peq : Infer{'ayh : type}. Infer{'ayi : type}. Infer{'ayj : type}. 'ayj -> 'ayi -> 'ayh -> constraint
plt : Infer{'bjo : type}. Infer{'bjp : type}. Infer{'bjq : type}. 'bjq -> 'bjp -> 'bjo -> constraint
absdiff : Infer{'buv : type}. Infer{'buw : type}. Infer{'bux : type}. 'bux -> 'buw -> 'buv -> constraint
range : Infer{'cgs : type}. Infer{'cgt : type}. 'cgt -> 'cgs -> constraint
apply : Infer{'cmt : type}. Infer{'cmu : type}. Infer{'cmv : type}. 'cmv -> 'cmu -> 'cmt -> constraint
conj1 : Infer{'coe : type}. 'coe -> constraint
map : Infer{'csc : type}. Infer{'csd : type}. Infer{'cse : type}. 'cse -> 'csd -> 'csc -> constraint
mapcat : Infer{'dca : type}. Infer{'dcb : type}. Infer{'dcc : type}. 'dcc -> 'dcb -> 'dca -> constraint
appendif : Infer{'dln : type}. Infer{'dlo : type}. Infer{'dlp : type}. Infer{'dlq : type}. 'dlq -> 'dlp -> 'dlo -> 'dln -> constraint
filter : Infer{'dsx : type}. Infer{'dsy : type}. Infer{'dsz : type}. 'dsz -> 'dsy -> 'dsx -> constraint
queen : Infer{'a : type}. Infer{'b : type}. 'b -> 'a -> type
queen1 : Infer{'a : type}. 'a -> type
queens_in : Infer{'ehy : type}. Infer{'ehz : type}. Infer{'eia : type}. 'eia -> 'ehz -> 'ehy -> constraint
threatens : Infer{'eoi : type}. Infer{'eoj : type}. Infer{'eok : type}. 'eok -> 'eoj -> 'eoi -> constraint
threatens1 : Infer{'a : type}. 'a -> type
safe : Infer{'fie : type}. Infer{'fif : type}. Infer{'fig : type}. 'fig -> 'fif -> 'fie -> constraint
safe1 : Infer{'a : type}. 'a -> type
addqueen : Infer{'ftv : type}. Infer{'ftw : type}. Infer{'ftx : type}. Infer{'fty : type}. 'fty -> 'ftx -> 'ftw -> 'ftv -> constraint
addqueen2 : Infer{'a : type}. Infer{'b : type}. 'b -> 'a -> type
addq_all : Infer{'gip : type}. Infer{'giq : type}. Infer{'gir : type}. Infer{'gis : type}. 'gis -> 'gir -> 'giq -> 'gip -> constraint
addqueens : Infer{'gkj : type}. Infer{'gkk : type}. Infer{'gkl : type}. Infer{'gkm : type}. 'gkm -> 'gkl -> 'gkk -> 'gkj -> constraint
addq_if : Infer{'gmd : type}. Infer{'gme : type}. Infer{'gmf : type}. Infer{'gmg : type}. Infer{'gmh : type}. 'gmh -> 'gmg -> 'gmf -> 'gme -> 'gmd -> constraint
snat : nat -> type
SZ : Infer{'hkm : type}. Spec{'n : 'hkm}. ('n ~ Z) ⊃ snat 'n
SS : Infer{'hlj : type}. Spec{'n : 'hlj}. Spec{'n : nat}. ('n ~ S 'n) ⊃ snat 'n -> snat 'n
solution : nat -> type -> constraint
solution : Spec{'n : nat}. Spec{'c : type}. solution 'n 'c => snat 'n -> 'c
x : cons (queen (S (S (S Z))) (S Z)) (cons (queen (S (S Z)) (S (S (S Z)))) (cons (queen (S Z) Z) (cons (queen Z (S (S Z))) nil)))
