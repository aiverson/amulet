list : type -> type
Nil : {'a : type}. list 'a
Cons : {'a : type}. ('a * list 'a) -> list 'a
elem : {'a : type}. 'a -> list 'a -> type
Here : {'xs : list 'a}. {'x : 'a}. {'xs : list 'a}. ('xs ~ Cons ('x * 'xs)) ⊃ elem 'x 'xs
There : {'xs : list 'a}. {'x : 'a}. {'xs : list 'a}. {'y : 'a}. ('xs ~ Cons ('y * 'xs)) ⊃ elem 'x 'xs -> elem 'x 'xs
product : list type -> type
Unit : {'a : 'jd}. ('a ~ Nil) ⊃ product 'a
Pair : {'a : 'kg}. {'a : type}. {'b : list type}. ('a ~ Cons ('a * 'b)) ⊃ ('a * product 'b) -> product 'a
:: : {'a : type}. {'b : list type}. 'a -> product 'b -> product (Cons ('a * 'b))
foo : product (Cons (int * Cons (unit * Cons (string * Cons (bool * Cons (float * Nil))))))
